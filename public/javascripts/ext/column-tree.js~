/*
 * Ext JS Library 2.1
 * Copyright(c) 2006-2008, Ext JS, LLC.
 * licensing@extjs.com
 *
 * http://extjs.com/license
 */

Ext.onReady(function(){

    var tree = new Ext.tree.ColumnTree({
        el:'tree-ct',
        width:800,
        autoHeight:true,
        rootVisible:false,
        enableDD:true,
        autoScroll:false,
        useArrows:false,
        title: 'Example Plans',

        columns:[{
            header:'Plan',
            width:600,
            dataIndex:'name'
        },{
            header:'Score',
            width:100,
            dataIndex:'score'
        },{
            header:'Award',
            width:100,
            dataIndex:'award'
        }],

        loader: new Ext.tree.TreeLoader({
            dataUrl:window.location.href,
            requestMethod: 'GET',
            baseParams:{format:'json'},
            uiProviders:{
                'col': Ext.tree.ColumnNodeUI
            }

        }),

        root: new Ext.tree.AsyncTreeNode({
           text:'Planners',
           draggable:true
        })

    });
    var win;
    tree.on('dblclick',function(node){
      if(!win){
          var planner_id=node.attributes.id;
          win = new Ext.Window({
                el:'hello-win',
                layout:'fit',
                autoScroll:false,
                width:800,
                height:600,
                closeAction:'hide',
                plain: true,
                animateTarget:'tree-ct',


                items: new Ext.TabPanel({
                    el: 'hello-tabs',
                    autoTabs:true,
                    activeTab:0,

                    autoScroll:true,
                    deferredRender:false,
                    border:false,
                        items: [{
                        title: 'Edit Plan',
                        autoHeight:true,
                        autoScroll:true,
                        autoLoad:'/planners/'+planner_id+'/edit'
                        },{
                        title: 'New Plan',
                         autoHeight:true,
                         autoScroll:true,
                         autoLoad:'/planners/new'
                        }]

                }),

                buttons: [{
                    text: 'Close',
                    handler: function(){
                        win.hide();
                    }
                }]
            });
        }
        win.show(this);
        win.on("show",function(){

               new Ext.TabPanel({
                    el: 'hello-tabs',
                    autoTabs:true,
                    activeTab:0,
                    deferredRender:false,

                    border:false,
                        items: [{
                        title: 'Edit Plan',
                          autoLoad:'/planners/'+planner_id+'/edit'
                        },{
                        title: 'New Plan',
                           autoLoad:'/planners/new'
                        }]

                })
        });
    });

    var inPlaceEditor;
    var dq=Ext.DomQuery;
    var dh=Ext.DomHelper;
    var el;
    var nodeId;
    var fieldName;
    var msg=Ext.get('msg');
    var modifiedValue;
    tree.on("click",function(node,e){
            //var score=node.attributes.score;
            //var plan=node.attributes.name;
            //var award=node.attributes.award;


            var target=e.getTarget("",2,true);


            if(target){
              if(dq.is(target.dom,"span[id*=plan]") || dq.is(target.dom,"div[id*=plan]")){
                 if(dq.is(target.dom,"span[id*=plan-name]") || dq.is(target.dom,"div[id*=plan-name]")){
                   fieldName="name";
                 }
                 else if(dq.is(target.dom,"span[id*=plan-score]") || dq.is(target.dom,"div[id*=plan-score]")){
                   fieldName="score";
                 }
                 else if(dq.is(target.dom,"span[id*=plan-award]") || dq.is(target.dom,"div[id*=plan-award]")){
                   fieldName="award";
                 }
                 else{
                   fieldName="";
                 }
                 nodeId=node.id;

                 if(inPlaceEditor && inPlaceEditor.isVisible()){
                   modifiedValue=inPlaceEditor.getValue();
                   if(fieldName!="" && modifiedValue!=""){
                       updatePlanner(nodeId,fieldName,modifiedValue);
                   }
                   inPlaceEditor.destroy();
                 }

                 inPlaceEditor=new Ext.form.TextField({
                   name:"score",
                   grow:true,
                   growMax:500
                   // value:plan,
                    //renderTo:target.id
                });

                //alert(target.innerHTML);
                targetValue=target.dom.innerHTML.replace(/<.+?>/gim,'');
                //target.innerHTML="";
                // targetValue=target.getValue();
                target.update("");
                inPlaceEditor.setValue(targetValue);
                inPlaceEditor.render(target);
              }else if(dq.is(target.dom,"input")){
                  inPlaceEditor.syncSize();

              }else{
                  if(inPlaceEditor && inPlaceEditor.isVisible()){
                    modifiedValue=inPlaceEditor.getValue();
                    if(fieldName!="" && modifiedValue!=""){
                      updatePlanner(nodeId,fieldName,modifiedValue);
                    }
                    inPlaceEditor.hide();
                  }

              }
            }

    });

    function updatePlanner(id,field,value){
        Ext.Ajax.request({
             url:"/planners/"+id+".xml",
             method:"PUT",
             params:"planner["+field+"]="+value,
             success:updateNode(value),
             failure:undoUpdateNode(value)

        });
        // Ext.Ajax.on("beforerequest",this.showSpinner,this);
    }

    function updateNode(value){
        el=inPlaceEditor.getEl();
        el.update("");
        dh.insertAfter(el,value);
        inPlaceEditor.hide();
        msg.setWidth(100,true);
    }

    function undoUpdateNode(originValue){
        el=inPlaceEditor.getEl();
        el.update("");
        dh.insertAfter(el,originValue);
        inPlaceEditor.hide();
    }

    tree.on("check",function(node,checked){
            //alert(node.attributes.plan);
            node.cls="x-tree-headers";
            //node.disable();

          }); //注册"check"事件

    Ext.tree.TreeNodeUI.prototype.onOver=function(e){
      this.addClass('x-tree-node-over');
      this.fireEvent("mouseover", this.node, e);
    };

    tree.addListener('mouseover',showFloattingToolbar);
    tree.render();
    tree.expandAll(true)

   var floattingToolbar;
   var sharedPlannerId=0;

   var addAction=new Ext.Action({
           text:"",
           handler:showAddPlanEditor,
           iconCls:"badd"
       });

    var editAction=new Ext.Action({
           text:"",
           handler:showPlanEditor,
           iconCls:"bedit"
       });


    var delAction=new Ext.Action({
           text:"",
           handler:function(){
               Ext.MessageBox.alert(sharedPlannerId);
           },
           iconCls:"bdel"
       });

    var checkAction=new Ext.Action({
           text:"",
           handler:function(){
               Ext.MessageBox.alert("new plan");
           },
           iconCls:"bcheck"
       });


    var editWin;
    var showWin;
    var editPanel;

    function showPlanEditor(){
      if(!editPanel){
          editPanel=new Ext.Panel({
                      title: 'Edit Plan',
                      renderTo:"editPanel",
                      autoScroll:true,
                      autoHeight:true,
                      autoLoad:'/planners/'+sharedPlannerId+'/edit'
            });
      }

      if(!editWin){
          editWin=new Ext.Window({
              el:'plan-editor',
              title:"Plan Editor",
              width:700,
              height:600,
              autoScroll:true,
              closeAction:'hide',
              layout:'fit',
              items:editPanel,

              buttons: [{
                text: 'Close',
                handler: function(){
                   editWin.hide();
                }
             }]
          });
      }
      updater=editPanel.getUpdater();
      updater.update({url:'/planners/'+sharedPlannerId+'/edit'});
      editWin.show();
    }


    var addWin;
    var showAddWin;
    var addPanel;

    function showAddPlanEditor(){
      if(!addPanel){
          addPanel=new Ext.Panel({
                      title: 'Add Plan',
                      renderTo:"addPanel",
                      autoScroll:true,
                      autoHeight:true,
                      autoLoad:'/planners/new?parent_id='+planner_id
            });
      }

      if(!addWin){
          addWin=new Ext.Window({
              el:'add-plan-editor',
              title:"Add Plan Editor",
              width:820,
              height:600,
              autoScroll:true,
              closeAction:'hide',
              layout:'fit',
              items:addPanel,

              buttons: [{
                text: 'Close',
                handler: function(){
                   addWin.hide();
                }
             }]
          });
      }
      updater=addPanel.getUpdater();
      updater.update({url:'/planners/new'});
      addWin.show();
    }


    function showFloattingToolbar(node,e){
       if(node){
           var planner_id=node.attributes.id;
           sharedPlannerId=planner_id;
           treePosition=tree.getPosition();
           treeSize=tree.getSize();
           tx=treePosition[0]+treeSize.width;
           ty=e.getPageY();

           if(!floattingToolbar){
             floattingToolbar=new Ext.Toolbar({
                    renderTo:"floatting-toolbar",
                    xtype:"tbbutton",
                    width:90,
                    height:25,
                    x:tx,
                    y:ty

              });

            floattingToolbar.show();
            floattingToolbar.addButton([checkAction,addAction,editAction,delAction]);

          }
          floattingToolbar.setPagePosition(tx,ty);

       }

   }


});

